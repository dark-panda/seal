#!/usr/bin/env ruby
# -*- ruby -*-

class Seal

  def initialize( options )
    @options = options
  end

  def tex
    Dir::chdir( @options[ :directory ] )

    unless @options[ :pdf ]
      commands = [ "latex mbpbook", 
                   "makeindex mbpbook",
                   "latex mbpbook",
                   "dvips mbpbook" ]
    else
      commands = [ "pdflatex mbpbook", 
                   "makeindex mbpbook",
                   "pdflatex mbpbook",
                   "dvips mbpbook" ]
    end
    
    commands.each do |command|
      run_command( command )
      if not $?.success?
        $stderr << "error: command `#{command}' failed\n"
        exit( 1 )
      end
    end
  end

  def run_command( command )
    if @options[ :quiet ]
      `#{command}`
    else
      system( command )
    end
  end
  
end

if __FILE__ == $0
  require 'optparse'
  require 'lib/about'
  
  options = Hash.new
  opts = OptionParser.new do |opts|
    opts.banner = <<EOS
seal #{Seal::VERSION} from #{Seal::DATE}
Usage: seal-tex [options] [directory]

seal-tex is a simple command line tool to TeX
the Dylanchords LaTeX files

Options:
EOS

    opts.version = Seal::VERSION

    opts.on( "--pdf", "Create PDF output instead of PostScript" ) do |pdf|
      options[ :pdf ] = pdf
    end
    opts.on( "-v", "--[no-]verbose", "Write out what is going on" ) do |v|
      options[ :quiet ] = !v
    end
    opts.on( "-q", "--[no-]quiet", "Don't write what is going on" ) do |q|
      options[ :quiet ] = q
    end

    opts.on_tail # separator
    opts.on_tail( "-h", "--help", "Show this message" ) do
      puts opts
      exit
    end
    opts.on_tail( "--copyright", "Show copyright (revised BSD License)" ) do
      puts Seal::LICENSE
      exit
    end
  end

  begin
    opts.parse!( ARGV )
  rescue OptionParser::ParseError => error
    puts error
    exit( 1 )
  end

  options[ :directory ] = ARGV.shift||File::join( Dir::pwd, 'book' )

  seal = Seal.new( options )

  begin
    seal.tex
  rescue Interrupt
  end
end
